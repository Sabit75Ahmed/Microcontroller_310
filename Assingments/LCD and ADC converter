//-----------------------------
// Title: Interfacing PIC with variable volatge Divider and Potentiometer
//-----------------------------
// Purpose: The Purpose of this project is to interfacing the LCD with PIC microcontroller and then
// use the variable voltage and get analog input from it. At last using Timer generate PWM signal and 
//dispaly it to the LCD.
// Dependencies: YES.Header file needs to add to the main file.
// Compiler: MPLAB X IDE v6.20
// Author: Sabit Ahmed 
// OUTPUTS: Outputs of the program are PORTB and PORTD which are connected to the LCD. 
// INPUTS: INput is the analog Input and connected to the RA0 pin of the board
// Versions:
//  	V1.0: today?s date - 4/30/2024 
//  	V1.2: date -05/01/2024

#include "config.h"
#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4

#define RS LATD0                   /* PORTD 0 pin is used for Register Select */
#define EN LATD1                   /* PORTD 1 pin is used for Enable */
#define ldata LATB                 /* PORTB is used for transmitting data to LCD */

#define LCD_Port TRISB              
#define LCD_Control TRISD
#define Vref 5.0 // voltage reference 
int digital; // holds the digital value 
float voltage; // hold the analog value (volt))
char data[10];
float myresult;
void ADC_Init(void);
void LCD_Init();
void LCD_Command(char );
void LCD_Char(char x);
void LCD_String(const char *);
void LCD_String_xy(char ,char ,const char*);
void MSdelay(unsigned int );
void pwm();
void TMR2_Initialize (void);


/*****************************Main Program*******************************/

void main(void) {
    //OSCCON=0x72;                   /* Use Internal Oscillator with Frequency 8MHZ */ 
    LCD_Init();                    /* Initialize 16x2 LCD */
    ADC_Init();
    
    //LCD_String_xy(1,0,"Sabit");    /* Display string at location(row,location). */
                                   /* This function passes string to display */
    //LCD_String_xy(2,0,"Ahmed");   /*Display string at location(row,location). */
                                   /* This function passes string to display */    
    
    while(1){
         ADCON0bits.GO = 1; //Start conversion
        while (ADCON0bits.GO); //Wait for conversion done
        digital = (ADRESH*256) | (ADRESL);/*Combine 8-bit LSB and 2-bit MSB*/
        voltage= digital*((float)Vref/(float)(4096)); 
        myresult = voltage;
        LCD_String_xy(1,0,"Input Voltage:");    /* Display string at location(row,location). */
          //print on LCD 
        /*It is used to convert integer value to ASCII string*/
        sprintf(data, "%.2f",myresult);

        strcat(data," V             ");	/*Concatenate result and unit to print*/
        //LCD_String_xy(2,4,data);/*Send string data for printing*/
    LCD_String_xy(2,0,data); 
    __delay_ms(500);
    }
                   
}

/****************************Functions********************************/
void LCD_Init()
{
    MSdelay(15);           /* 15ms,16x2 LCD Power on delay */
    LCD_Port = 0x00;       /* Set PORTB as output PORT for LCD data(D0-D7) pins */
    LCD_Control = 0x00;    /* Set PORTD as output PORT LCD Control(RS,EN) Pins */
    LCD_Command(0x01);     /* clear display screen */
    LCD_Command(0x38);     /* uses 2 line and initialize 5*7 matrix of LCD */
    LCD_Command(0x0c);     /* display on cursor off */
    LCD_Command(0x06);     /* increment cursor (shift cursor to right) */
}

void LCD_Clear()
{
        LCD_Command(0x01); /* clear display screen */
}

void LCD_Command(char cmd )
{
    ldata= cmd;            /* Send data to PORT as a command for LCD */   
    RS = 0;                /* Command Register is selected */
    EN = 1;                /* High-to-Low pulse on Enable pin to latch data */ 
    NOP();
    EN = 0;
    MSdelay(3); 
}

void LCD_Char(char dat)
{
    ldata= dat;            /* Send data to LCD */  
    RS = 1;                /* Data Register is selected */
    EN=1;                  /* High-to-Low pulse on Enable pin to latch data */   
    NOP();
    EN=0;
    MSdelay(1);
}


void LCD_String(const char *msg)
{
    while((*msg)!=0)
    {       
      LCD_Char(*msg);
      msg++;    
        }
}

void LCD_String_xy(char row,char pos,const char *msg)
{
    char location=0;
    if(row<=1)
    {
        location=(0x80) | ((pos) & 0x0f); /*Print message on 1st row and desired location*/
        LCD_Command(location);
    }
    else
    {
        location=(0xC0) | ((pos) & 0x0f); /*Print message on 2nd row and desired location*/
        LCD_Command(location);    
    }  
    LCD_String(msg);

}
/*********************************Delay Function********************************/
void MSdelay(unsigned int val)
{
     unsigned int i,j;
        for(i=0;i<val;i++)
            for(j=0;j<165;j++);      /*This count Provide delay of 1 ms for 8MHz Frequency */
}
  void ADC_Init(void)
{
       //Setup ADC
    ADCON0bits.FM = 1;  //right justify
    ADCON0bits.CS = 1; //ADCRC Clock
    
    TRISAbits.TRISA0 = 1; //Set RA0 to input
    ANSELAbits.ANSELA0= 1; //Set RA0 to analog
    // Added 
    ADPCH = 0x00; //Set RA0 as Analog channel in ADC ADPCH
    ADCLK = 0x00; //set ADC CLOCK Selection register to zero
    
    ADRESH = 0x00; // Clear ADC Result registers
    ADRESL = 0x00; 
    
    ADPREL = 0x00; // set precharge select to 0 in register ADPERL & ADPERH
    ADPREH = 0x00; 
    
    ADACQL = 0x00;  // set acquisition low and high byte to zero 
    ADACQH = 0x00;    
    
    ADCON0bits.ON = 1; //Turn ADC On 
}  
  void pwm (){
      CCP1PPS = 0x0A ;  //assign ccp1 to RC2
      CCP1CONbits.MODE = 0b1100; //enabling pwm
      TRISCbits.TRISC2=0; //RC2 as output 
      T2PR = 255 ; //pwm period
      uint16_t dutycycle = 1023;
      CCPR1=dutycycle;
      // = (dutycycle & 0x03);
      CCP1CONbits.FMT = 0; // right allignment
      PIR4bits.TMR2IF = 0; //clear timer flag
      T2CON = 0b00001;
      T2CONbits.T2CKPS = 0b00; //prescale 1:1
      T2CONbits.ON =1 ; // timer 2 on
      while (!PIR4bits.TMR2IF); //keep looping until it set
      
    }
  void TMR2_Initialize (void){
      //T2CS = FOSC/4
      T2CLKCON = 0x01;
      //T2PSYNC not synchronize
      T2HLT = 0x00;
      //T2RSEL T2CKIPPS pin 
      T2RST = 0x00;
      //timer period 
      T2PR = 0xFF;
      //TMR2 0
      T2TMR = 0x00;
      // clearing IF flag
      PIR4bits.TMR2IF = 0;
      //T2CKPS 1:1 ; T2OUTPS 1:1
      T2CON = 0xA0;
     
  }
